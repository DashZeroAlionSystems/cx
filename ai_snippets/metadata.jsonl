{"id":"go-hex-ports-adapters-001","language":"go","paradigm":["procedural","layered-architecture","hexagonal"],"patterns":["Ports and Adapters","Dependency Inversion"],"domain":"backend","difficulty":"intermediate","tags":["go","clean-architecture","testability","in-memory"],"license":"MIT-compat-example","quality_notes":"Separates domain, application service, and infrastructure adapters; easy to swap gateways","task_type":"pattern/example","good_for_training":["identify ports/adapters","mock boundaries","error propagation"],"prompt":"Implement a checkout use-case using hexagonal architecture (ports/adapters)","completion_summary":"Order domain with CheckoutService, in-memory repo, fake payment gateway","file":"snippets/go_hexagonal_example.go"}
{"id":"rust-command-queue-002","language":"rust","paradigm":["OO","procedural"],"patterns":["Command","Queue"],"domain":"backend","difficulty":"beginner","tags":["rust","trait-objects","encapsulation"],"license":"MIT-compat-example","quality_notes":"Minimal command trait with queued execution and results collection","task_type":"pattern/example","good_for_training":["pattern recognition","trait objects","decoupling actions"],"prompt":"Refactor action handling into Command objects dispatched via a queue","completion_summary":"CommandBus runs boxed commands implementing a Command trait","file":"snippets/rust_command_pattern.rs"}
{"id":"react-container-presentational-003","language":"typescript","paradigm":["declarative"],"patterns":["Container/Presentational","Props Drilling"],"domain":"frontend","difficulty":"beginner","tags":["react","tsx","state-lifting"],"license":"MIT-compat-example","quality_notes":"Stateful container with stateless list, clear prop-based contract","task_type":"pattern/example","good_for_training":["separate container from view","prop typing","state updates"],"prompt":"Split React logic from presentation using a container and a presentational component","completion_summary":"TodoContainer manages state; TodoList renders and toggles items","file":"snippets/react_container_presentational.tsx"}
{"id":"csharp-cx-api-004","language":"csharp","paradigm":["OO","layered-architecture"],"patterns":["Repository","Service Layer","DTO"],"domain":"web-backend","difficulty":"intermediate","tags":["aspnet-core","npgsql","postgres","minimal-api"],"license":"MIT-compat-example","quality_notes":"Minimal API with repository/service, parameterized queries, env-based connection string","task_type":"api/example","good_for_training":["csharp minimal api","db access with npgsql","layered boundaries"],"prompt":"Create a minimal ASP.NET Core API backed by Postgres with repository/service","completion_summary":"Endpoints for upsert and get user, Pg repository with upsert on conflict","file":"snippets/csharp_aspnet_cx_api.cs"}
{"id":"react-cx-client-005","language":"typescript","paradigm":["declarative"],"patterns":["Hooks","Client Factory"],"domain":"frontend","difficulty":"beginner","tags":["react","fetch","hooks"],"license":"MIT-compat-example","quality_notes":"Typed client factory with simple error handling and a reusable data hook","task_type":"api/example","good_for_training":["react hooks data fetching","client abstraction"],"prompt":"Write a React client and hook to consume a CX API","completion_summary":"Factory returns get/upsert; useUser loads by id with loading/error states","file":"snippets/react_cx_api_client.ts"}
{"id":"sql-cx-users-006","language":"sql","paradigm":["declarative"],"patterns":["Idempotent Migration"],"domain":"data","difficulty":"beginner","tags":["postgres","ddl"],"license":"MIT-compat-example","quality_notes":"Creates cx_users table compatible with C# model; idempotent table creation","task_type":"data/example","good_for_training":["sql migrations","model-table mapping"],"prompt":"Create an idempotent Postgres migration for cx_users table","completion_summary":"Defines cx_users with id/email/is_active and timestamps","file":"snippets/sql_cx_users.sql"}
{"id":"cx-ddd-project-007","language":"csharp","paradigm":["OO","DDD"],"patterns":["Entity","Domain Event"],"domain":"web-backend","difficulty":"intermediate","tags":["ddd","entity","domain-events"],"license":"proprietary-internal-example","quality_notes":"Shows entity state changes and domain event emission","task_type":"pattern/example","good_for_training":["ddd entity","domain events","encapsulation"],"prompt":"Extract a DDD entity that emits domain events on create/update","completion_summary":"Project entity with Create/Update methods and ProjectCreated/ProjectUpdated events","file":"snippets/cx_project_entity.cs"}
{"id":"cx-domain-event-008","language":"csharp","paradigm":["OO","DDD"],"patterns":["Domain Event"],"domain":"web-backend","difficulty":"beginner","tags":["event","ddd"],"license":"proprietary-internal-example","quality_notes":"Minimal domain event carrying aggregate data","task_type":"pattern/example","good_for_training":["domain events","event payloads"],"prompt":"Model a domain event for message creation","completion_summary":"MessageCreated event exposing Message payload","file":"snippets/cx_message_created_event.cs"}
{"id":"cx-repository-009","language":"csharp","paradigm":["OO","layered-architecture"],"patterns":["Repository"],"domain":"web-backend","difficulty":"intermediate","tags":["ef-core","repository","unit-of-work"],"license":"proprietary-internal-example","quality_notes":"Repository interface and concrete implementation over EF DbContext","task_type":"pattern/example","good_for_training":["repository pattern","unit of work"],"prompt":"Define a repository interface and implementation for Project","completion_summary":"IProjectRepository + ProjectRepository inheriting GenericRepository","file":"snippets/cx_project_repository.cs"}
{"id":"cx-cqrs-add-project-010","language":"csharp","paradigm":["OO","CQRS"],"patterns":["Command","Handler"],"domain":"web-backend","difficulty":"intermediate","tags":["mediatr","cqrs","authorization"],"license":"proprietary-internal-example","quality_notes":"CQRS command handler with authorization and unit of work","task_type":"pattern/example","good_for_training":["mediatr handlers","authorization gates","unit of work"],"prompt":"Implement an AddProject command handler with authorization and persistence","completion_summary":"Handler checks permission, maps DTO, persists, commits and returns DTO","file":"snippets/cx_add_project_cqrs.cs"}