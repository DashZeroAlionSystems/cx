using System.Text;
using System.Text.Json;
using CX.Clients.Afriforum.Domain;
using CX.Engine.Archives;
using CX.Engine.Archives.InMemory;
using CX.Engine.Archives.Pinecone;
using CX.Engine.Assistants.ContextAI;
using CX.Engine.ChatAgents;
using CX.Engine.ChatAgents.OpenAI;
using CX.Engine.Common.DistributedLocks;
using CX.Engine.Common.Embeddings;
using CX.Engine.Common.Embeddings.OpenAI;
using CX.Engine.Common.PostgreSQL;
using CX.Engine.Common.Python;
using CX.Engine.Common.Stores.Binary;
using CX.Engine.Common.Stores.Binary.PostgreSQL;
using CX.Engine.Common.Stores.Json;
using CX.Engine.Common.Tracing.Langfuse;
using CX.Engine.DocExtractors;
using CX.Engine.DocExtractors.Images;
using CX.Engine.DocExtractors.Text;
using CX.Engine.FileServices;
using CX.Engine.HelmTemplates;
using CX.Engine.Importing;
using CX.Engine.Importing.Prod;
using CX.Engine.TextProcessors;
using CX.Engine.TextProcessors.Splitters;
using CX.Engine.Assistants.Walter1;
using CX.Engine.Common;
using CX.Engine.Registration.Full;
using CX.Engine.SharedOptions;

namespace CX.Engine.DeploymentHelper;

public class AppSettingsBuilder
{
    private readonly MemoryStream _ms;
    private readonly Utf8JsonWriter _jw;

    private const string InMemoryArchive_ada_002_Partial = "ada-002";
    private const string InMemoryArchive_3_large_Partial = "3-large";
    private const string PostgreSQLClientName = "pg_default";
    private const string S3DefaultHelperName = "s3_default";
    private const string DefaultLUACore = "lua_default";
    private const string AzureContentSafetyName_Partial = "safe";
    private const string PythonProcess_Default = "default";
    private const string JsonStore_vector_tracker = "vector-tracker";
    private const string JsonStore_pdftojpg_documents = "pdftojpg-documents";
    private const string JsonStore_gpt4vision = "gpt4vision";
    private const string JsonStore_valid_url = "valid-url";
    private const string JsonStore_attachment_tracker = "attachment_tracker";
    private const string JsonStore_sakenetwerk_cache = "sakenetwerk_cache";
    private const string ProdRepoName = "default";
    private const string Archive_PineconeName_Partial = "default";
    private const string Archive_PineconeName_Full = $"{ArchiveRouter.Pinecone}.{Archive_PineconeName_Partial}";
    private const string BinaryStore_PDFToJpg_Partial = "pdf_to_jpg";
    private const string BinaryStore_PDFToJpg_Full = $"{BinaryStoreDI.BinaryStore_postgresql}.{BinaryStore_PDFToJpg_Partial}";
    private const string BinaryStore_DocXToText_Partial = "docx_to_text";
    private const string BinaryStore_DocXToText_Full = $"{BinaryStoreDI.BinaryStore_postgresql}.{BinaryStore_DocXToText_Partial}";
    private const string BinaryStore_PDFPlumber_Partial = "pdfplumber";
    private const string BinaryStore_PDFPlumber_Full = $"{BinaryStoreDI.BinaryStore_postgresql}.{BinaryStore_PDFPlumber_Partial}";
    private const string BinaryStore_DocXToPDF_Partial = "docx_to_pdf";
    private const string BinaryStore_DocXToPDF_Full = $"{BinaryStoreDI.BinaryStore_postgresql}.{BinaryStore_DocXToPDF_Partial}";
    private const string Walter1Assistant_default_Partial = "default";
    public const string ChatAgent_OpenAI_gpt_4o_mini = $"{ChatAgentsDI.Engine_OpenAI}.{OpenAIChatAgent.Models.gpt_4o_mini}";

    public AppSettingsBuilder()
    {
        _ms = new();
        _jw = new(_ms, new()
        {
            Indented = true
        });
    }

    private void WriteAutoGenNotice() =>
        _jw.WriteCommentValue(
            $"NB: This section is generated by {nameof(AppSettingsBuilder)} in CX.Engine.DeploymentHelper");

    private void WriteOpenAIEmbedderOptions()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(EmbedderDI.OpenAIEmbedderConfigurationSection);
        _jw.WriteStartObject();
        _jw.WriteYamlRef(nameof(OpenAIEmbedderOptions.APIKey), Values.OpenAIApiKey);
        _jw.WriteNumber(nameof(OpenAIEmbedderOptions.MaxConcurrentCalls), 100);
        _jw.WriteEndObject();
    }

    private void WriteStructuredDataOptions()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(StructuredDataDI.ConfigurationSection);
        _jw.WriteStartObject();
        _jw.WriteYamlRef(nameof(StructuredDataOptions.ApiKey), Values.StuckturedDataApiKey);
        _jw.WriteYamlRef(nameof(StructuredDataOptions.ApiSecret), Values.StuckturedDataApiSecret);
        _jw.WriteEndObject();
    }
    private void WriteWeeleeOptions()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(WeeleeDI.ConfigurationSection);
        _jw.WriteStartObject();
        _jw.WriteYamlRef(nameof(WeeleeOptions.ClientId), Values.WeeleeClientId);
        _jw.WriteYamlRef(nameof(WeeleeOptions.ClientSecret), Values.WeeleeClientSecret);
        _jw.WriteYamlRef(nameof(WeeleeOptions.Username), Values.WeeleeUsername);
        _jw.WriteYamlRef(nameof(WeeleeOptions.Password), Values.WeeleePassword);
        _jw.WriteYamlRef(nameof(WeeleeOptions.RequestUrl), Values.WeeleeRequestUrl);
        _jw.WriteEndObject();
    }

    private void WriteOpenAIChatAgents()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(OpenAIChatAgentsDI.ConfigurationSection);
        _jw.WriteStartObject();

        foreach (var model in new[]
                 {
                     OpenAIChatAgent.Models.gpt_4o_mini, OpenAIChatAgent.Models.gpt_4o,
                     OpenAIChatAgent.Models.gpt_3_5_turbo, OpenAIChatAgent.Models.o1_mini,
                     OpenAIChatAgent.Models.o1_preview
                 })
        {
            _jw.WritePropertyName(model);
            _jw.WriteStartObject();
            _jw.WriteYamlRef(nameof(OpenAIChatAgentOptions.APIKey), Values.OpenAIApiKey);
            _jw.WriteString(nameof(OpenAIChatAgentOptions.Model), model.ToLowerInvariant());
            _jw.WriteNumber(nameof(OpenAIChatAgentOptions.MaxConcurrentCalls), model == OpenAIChatAgent.Models.gpt_4o_mini ? 20 : 12);
            if (model == OpenAIChatAgent.Models.o1_mini || model == OpenAIChatAgent.Models.o1_preview)
            {
                _jw.WriteBoolean(nameof(OpenAIChatAgentOptions.OnlyUserRole), true);
                _jw.WriteNumber(nameof(OpenAIChatAgentOptions.DefaultTemperature), 1);
            }

            _jw.WriteEndObject();
        }

        //Business GPT
        {
            _jw.WritePropertyName(FullProfileMigrations.BusinessGPT);
            _jw.WriteStartObject();
            _jw.WriteYamlRef(nameof(OpenAIChatAgentOptions.APIKey), Values.OpenAIApiKey);
            _jw.WriteEndObject();
        }

        _jw.WriteEndObject();
    }

    public void WritePgConsoleOptions()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(PgConsoleDI.ConfigurationSection);
        _jw.WriteString(nameof(PgConsoleOptions.PostgreSQLClientName), PostgreSQLClientName);
        _jw.WriteString(nameof(PgConsoleOptions.LuaCoreName), DefaultLUACore);
        _jw.WriteEndObject();
    }

    public void WriteLuaCores()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(LuaCoreDI.ConfigurationSection);
        _jw.WriteStartObject(DefaultLUACore);
        _jw.WriteStartArray(nameof(LuaCoreOptions.Libraries));
        _jw.WriteStringValue(LuaCoreDI.LuaCoreLibraryServiceProvider);
        _jw.WriteEndArray();
        _jw.WriteEndObject();
        _jw.WriteEndObject();
    }

    private void WriteVectorLinkImporterOptions()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(VectorLinkImporterDI.ConfigurationSection);
        _jw.WriteStartObject();
        _jw.WriteString(nameof(VectorLinkImporterOptions.ArchiveName), Archive_PineconeName_Full);
        _jw.WriteString(nameof(VectorLinkImporterOptions.AttachmentTrackerName), JsonStore_attachment_tracker);
        _jw.WriteString(nameof(VectorLinkImporterOptions.ProdRepoName), ProdRepoName);
        _jw.WriteYamlRef(nameof(VectorLinkImporterOptions.TrainCitations), Values.VectorLink_TrainCitations);
        _jw.WriteYamlRef(nameof(VectorLinkImporterOptions.PreferImageTextExtraction), Values.VectorLink_PreferImageTextExtraction);
        _jw.WriteYamlRef(nameof(VectorLinkImporterOptions.AttachToSelf), Values.VectorLink_AttachToSelf);
        _jw.WriteYamlRef(nameof(VectorLinkImporterOptions.DefaultAttachPageImages), Values.VectorLink_DefaultAttachPageImages);
        _jw.WriteYamlRef(nameof(VectorLinkImporterOptions.MaxConcurrency), Values.VectorLink_MaxConcurrency);
        _jw.WriteYamlRef(nameof(VectorLinkImporterOptions.ExtractImages), Values.VectorLink_ExtractImages);
        _jw.WritePropertyName(nameof(VectorLinkImporterOptions.DocumentProcessors));
        _jw.WriteStartArray();
        _jw.WriteYamlRefValue(Values.VectorLink_TextProcessor1);
        _jw.WriteEndArray();
        _jw.WriteEndObject();
    }

    private void WriteInMemoryArchives()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(InMemoryArchiveDI.ConfigurationSection);
        _jw.WriteStartObject();

        _jw.WriteStartObject(InMemoryArchive_ada_002_Partial);
        _jw.WriteString(nameof(InMemoryArchiveOptions.EmbeddingModel), OpenAIEmbedder.Models.text_embedding_ada_002);
        _jw.WriteEndObject();

        _jw.WriteStartObject(InMemoryArchive_3_large_Partial);
        _jw.WriteString(nameof(InMemoryArchiveOptions.EmbeddingModel), OpenAIEmbedder.Models.text_embedding_3_large);
        _jw.WriteEndObject();

        _jw.WriteEndObject();
    }

    private void WriteLineSpliiterOptions()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(LineSplitterDI.ConfigurationSection);
        _jw.WriteStartObject();
        _jw.WriteYamlRef(nameof(LineSplitterOptions.SegmentTokenLimit), Values.SegmentTokenLimit);
        _jw.WriteEndObject();
    }

    private void WriteAzureAITranslators()
    {
        WriteAutoGenNotice();
        _jw.WritePropertyName(AzureAITranslatorDI.ConfigurationSection);

        _jw.WriteStartObject();

        _jw.WriteStartObject("en");
        _jw.WriteYamlRef(nameof(AzureAITranslatorOptions.ApiKey), Values.AzureAIKey);
        _jw.WriteString(nameof(AzureAITranslatorOptions.Region), "swedencentral");
        _jw.WriteString(nameof(AzureAITranslatorOptions.TargetLanguage), "en");
        _jw.WriteBoolean(nameof(AzureAITranslatorOptions.FailHard), true);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.DontTranslateMinConfidence), 0.5);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.RetryMaxDelaySeconds), 30);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.RetryTimeoutSeconds), 180);
        _jw.WriteEndObject();

        _jw.WriteStartObject("af");
        _jw.WriteYamlRef(nameof(AzureAITranslatorOptions.ApiKey), Values.AzureAIKey);
        _jw.WriteString(nameof(AzureAITranslatorOptions.Region), "swedencentral");
        _jw.WriteString(nameof(AzureAITranslatorOptions.TargetLanguage), "af");
        _jw.WriteBoolean(nameof(AzureAITranslatorOptions.FailHard), true);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.DontTranslateMinConfidence), 0.5);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.RetryMaxDelaySeconds), 30);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.RetryTimeoutSeconds), 180);
        _jw.WriteEndObject();

        _jw.WriteStartObject("nl");
        _jw.WriteYamlRef(nameof(AzureAITranslatorOptions.ApiKey), Values.AzureAIKey);
        _jw.WriteString(nameof(AzureAITranslatorOptions.Region), "swedencentral");
        _jw.WriteString(nameof(AzureAITranslatorOptions.TargetLanguage), "nl");
        _jw.WriteBoolean(nameof(AzureAITranslatorOptions.FailHard), true);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.DontTranslateMinConfidence), 0.5);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.RetryMaxDelaySeconds), 30);
        _jw.WriteNumber(nameof(AzureAITranslatorOptions.RetryTimeoutSeconds), 180);
        _jw.WriteEndObject();

        _jw.WriteEndObject();
    }

    private void WriteAzureContentSafety()
    {
        WriteAutoGenNotice();
        _jw.WriteStartObject(AzureContentSafetyDI.ConfigurationSection);

        {
            _jw.WriteStartObject(AzureContentSafetyName_Partial);
            _jw.WriteYamlRef(nameof(AzureContentSafetyOptions.ApiKey), Values.AzureContentSafetyApiKey);
            _jw.WriteYamlRef(nameof(AzureContentSafetyOptions.Endpoint), Values.AzureContentSafetyEndpoint);
            _jw.WriteBoolean(nameof(AzureContentSafetyOptions.FailHard), true);
            _jw.WriteNumber(nameof(AzureContentSafetyOptions.RetryMaxDelaySeconds), 30);
            _jw.WriteNumber(nameof(AzureContentSafetyOptions.RetryTimeoutSeconds), 180);
            _jw.WriteNumber(nameof(AzureContentSafetyOptions.ExceptionHateLevel), 3);
            _jw.WriteNumber(nameof(AzureContentSafetyOptions.ExceptionSexualLevel), 3);
            _jw.WriteNumber(nameof(AzureContentSafetyOptions.ExceptionViolenceLevel), 4);
            _jw.WriteNumber(nameof(AzureContentSafetyOptions.ExceptionSelfHarmLevel), 4);
            _jw.WriteEndObject();
        }

        _jw.WriteEndObject();
    }

    private void WritePostgreSQLOptions()
    {
        WriteAutoGenNotice();

        _jw.WritePropertyName(PostgreSQLClientDI.ConfigurationSection);
        _jw.WriteStartObject();

        _jw.WritePropertyName(PostgreSQLClientName);
        _jw.WriteStartObject();
        _jw.WriteYamlRef(nameof(PostgreSQLClientOptions.ConnectionString), Values.PostgreSQLConnectionString);
        _jw.WriteNumber(nameof(PostgreSQLClientOptions.MaxConcurrentQueries), 100);
        _jw.WriteEndObject();

        _jw.WriteEndObject();
    }

    private void WriteContextAI()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(ContextAIDI.ConfigurationSection);
        _jw.WriteYamlRef(nameof(ContextAIOptions.Host), Values.ContextAIHost);
        _jw.WriteBoolean(nameof(ContextAIOptions.Enabled), true);
        _jw.WriteYamlRef(nameof(ContextAIOptions.ApiKey), Values.ContextAIApiKey);
        _jw.WriteEndObject();
    }

    private void WriteLangfuse()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(LangfuseDI.ConfigurationSection);
        _jw.WriteYamlRef(nameof(LangfuseOptions.BaseUrl), Values.LangfuseHost);
        _jw.WriteYamlRef(nameof(LangfuseOptions.PublicKey), Values.LangfusePublicKey);
        _jw.WriteYamlRef(nameof(LangfuseOptions.SecretKey), Values.LangfuseSecretKey);
        _jw.WriteBoolean(nameof(LangfuseOptions.Enabled), true);
        _jw.WriteYamlRef(nameof(LangfuseOptions.TraceImports), Values.LangfuseTraceImports);
        _jw.WriteEndObject();
    }

    private void WritePythonProcesses()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(PythonProcessDI.ConfigurationSection);
        {
            _jw.WriteStartObject(PythonProcess_Default);
            _jw.WriteString(nameof(PythonProcessOptions.PythonInterpreterPath), "/usr/local/bin/python3.12");
            _jw.WriteString(nameof(PythonProcessOptions.WorkingDir), "/app/Py");
            _jw.WriteEndObject();
        }
        _jw.WriteEndObject();
    }

    private void WriteJsonStores()
    {
        WriteAutoGenNotice();

        void WriteStore(string storeName, string clientName, string tableName, int keyLength)
        {
            _jw.WriteStartObject(storeName);
            _jw.WriteString(nameof(JsonStoreOptions.PostgreSQLClientName), clientName);
            _jw.WriteString(nameof(JsonStoreOptions.TableName), tableName);
            _jw.WriteNumber(nameof(JsonStoreOptions.KeyLength), keyLength);
            _jw.WriteEndObject();
        }

        _jw.WriteStartObject(JsonStoreDI.ConfigurationSection);
        WriteStore(JsonStore_vector_tracker, PostgreSQLClientName, "vector_tracker", 36);
        WriteStore(JsonStore_pdftojpg_documents, PostgreSQLClientName, "pdftojpg_documents", 50);
        WriteStore(JsonStore_gpt4vision, PostgreSQLClientName, "gpt4vision", 100);
        WriteStore(JsonStore_valid_url, PostgreSQLClientName, "valid_url", 300);
        WriteStore(JsonStore_attachment_tracker, PostgreSQLClientName, "attachment_tracker", 36);
        WriteStore(JsonStore_sakenetwerk_cache, PostgreSQLClientName, "sakenetwerk_cache", 255);
        _jw.WriteEndObject();
    }

    private void WritePythonDocX()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(PythonDocXDI.ConfigurationSection);
        _jw.WriteString(nameof(PythonDocXOptions.ScriptPath), "docxtotext.py");
        _jw.WriteString(nameof(PythonDocXOptions.BinaryStore), BinaryStore_DocXToText_Full);
        _jw.WriteString(nameof(PythonDocXOptions.PythonProcess), PythonProcess_Default);
        _jw.WriteEndObject();
    }

    private void WritePDFPlumber()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(PDFPlumberDI.ConfigurationSection);
        _jw.WriteString(nameof(PDFPlumberOptions.ScriptPath), "pdfplumber_console.py");
        _jw.WriteString(nameof(PDFPlumberOptions.BinaryStore), BinaryStore_PDFPlumber_Full);
        _jw.WriteString(nameof(PDFPlumberOptions.PythonProcess), PythonProcess_Default);
        _jw.WriteEndObject();
    }

    private void WriteDocXToPDF()
    {
        WriteAutoGenNotice();
        
        _jw.WriteStartObject(DocXToPDFDI.ConfigurationSection);
        _jw.WriteBoolean(nameof(DocXToPDFOptions.Enabled), true);
        _jw.WriteString(nameof(DocXToPDFOptions.BinaryStore), BinaryStore_DocXToPDF_Full);
        _jw.WriteEndObject();
    }

    private void WritePDFToJpg()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(PDFToJpgDI.ConfigurationSection);
        _jw.WriteString(nameof(PDFToJpgOptions.ScriptPath), "pdftojpg.py");
        _jw.WriteString(nameof(PDFToJpgOptions.BinaryImageStore), BinaryStore_PDFToJpg_Full);
        _jw.WriteString(nameof(PDFToJpgOptions.JsonDocumentStore), JsonStore_pdftojpg_documents);
        _jw.WriteString(nameof(PDFToJpgOptions.PythonProcess), PythonProcess_Default);
        _jw.WriteString(nameof(PDFToJpgOptions.PopplerPath), "/bin");
        _jw.WriteEndObject();
    }

    private void WritePostgreSQLBinaryStores()
    {
        WriteAutoGenNotice();

        void WriteStore(string storeName, string clientName, string tableName, int keyLength)
        {
            _jw.WriteStartObject(storeName);
            _jw.WriteString(nameof(PostgreSQLBinaryStoreOptions.PostgreSQLClientName), clientName);
            _jw.WriteString(nameof(PostgreSQLBinaryStoreOptions.TableName), tableName);
            _jw.WriteNumber(nameof(PostgreSQLBinaryStoreOptions.KeyLength), keyLength);
            _jw.WriteEndObject();
        }

        _jw.WriteStartObject(PostgreSQLBinaryStoreDI.ConfigurationSection);
        WriteStore(BinaryStore_PDFToJpg_Partial, PostgreSQLClientName, "pdf_to_jpg", 44);//Guid #100000 = 36 + 2 + 6 = 44 
        WriteStore(BinaryStore_DocXToText_Partial, PostgreSQLClientName, "docx_to_text", 71);//sha256_hex = 71
        WriteStore(BinaryStore_PDFPlumber_Partial, PostgreSQLClientName, "pdf_to_text", 71);//sha256_hex = 71
        WriteStore(BinaryStore_DocXToPDF_Partial, PostgreSQLClientName, "docx_to_pdf", 71);//sha256_hex = 71
        _jw.WriteEndObject();
    }

    private void WriteGpt4VisionExtractor()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(Gpt4VisionExtractorDI.ConfigurationSection);
        _jw.WriteString(nameof(Gpt4VisionExtractorOptions.ChatAgent), ChatAgent_OpenAI_gpt_4o_mini);
        _jw.WriteYamlRef(nameof(Gpt4VisionExtractorOptions.SystemPrompt), Values.Gpt4Vision_SystemPrompt);
        _jw.WriteYamlRef(nameof(Gpt4VisionExtractorOptions.Question), Values.Gpt4Vision_Question);
        _jw.WriteString(nameof(Gpt4VisionExtractorOptions.JsonStore), JsonStore_gpt4vision);
        _jw.WriteEndObject();
    }

    private void WritePinecone()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(PineconeDI.ConfigurationSection);
        {
            _jw.WriteStartObject(Archive_PineconeName_Partial);
            _jw.WriteYamlRef(nameof(PineconeOptions.APIKey), Values.PineconeApiKey);
            _jw.WriteYamlRef(nameof(PineconeOptions.IndexName), Values.PineconeIndexName);
            _jw.WriteYamlRef(nameof(PineconeOptions.EmbeddingModel), Values.PineconeEmbeddingModel);
            _jw.WriteYamlRef(nameof(PineconeOptions.Namespace), Values.PineconeNamespace);
            _jw.WriteNumber(nameof(PineconeOptions.MaxChunksPerPineconeQuery), 100);
            _jw.WriteNumber(nameof(PineconeOptions.MaxConcurrency), 25);
            _jw.WriteBoolean(nameof(PineconeOptions.UseJsonVectorTracker), true);
            _jw.WriteString(nameof(PineconeOptions.JsonVectorTrackerName), JsonStore_vector_tracker);
            _jw.WriteYamlRef(nameof(PineconeOptions.AttachmentsBaseUrl), Values.AttachmentsBaseUrl);
            _jw.WriteEndObject();
        }
        _jw.WriteEndObject();
    }

    private void WriteFileServices()
    {
        WriteAutoGenNotice();
        
        _jw.WriteStartObject(FileServiceDI.ConfigurationSection);
        _jw.WriteString(nameof(FileServiceOptions.FileCacheDirectory), "/tmp");
        _jw.WriteEndObject();
    }

    private void WriteEmbeddingCache()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(EmbedderDI.EmbeddingCacheConfigurationSection);
        //_jw.WriteString(nameof(EmbeddingCacheOptions.CacheFile), Values.EmbeddingCacheFile);
        _jw.WriteBoolean(nameof(EmbeddingCacheOptions.UseCache), false);
        _jw.WriteEndObject();
    }

    private void WriteChatCache()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(ChatCacheDI.ConfigurationSection);
        //_jw.WriteString(nameof(ChatCacheOptions.CacheFile), Values.ChatCacheFile);
        _jw.WriteBoolean(nameof(ChatCacheOptions.UseCache), false);
        _jw.WriteEndObject();
    }

    private void WriteWalter1Assistants()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(Walter1AssistantDI.ConfigurationSection);
        _jw.WriteStartObject(Walter1Assistant_default_Partial);
        _jw.WriteYamlRef(nameof(Walter1AssistantOptions.ChatAgent), Values.Walter1AssistantChatAgent);
        _jw.WriteYamlRef(nameof(Walter1AssistantOptions.MinSimilarity), Values.Walter1MinSimilarity);
        _jw.WriteYamlRef(nameof(Walter1AssistantOptions.CutoffContextTokens), Values.Walter1CutoffContextTokens);
        _jw.WriteYamlRef(nameof(Walter1AssistantOptions.CutoffHistoryTokens), Values.Walter1CutoffHistoryTokens);
        _jw.WriteYamlRef(nameof(Walter1AssistantOptions.DefaultSystemPrompt), Values.Walter1DefaultSystemPrompt);
        _jw.WriteYamlRef(nameof(Walter1AssistantOptions.DefaultContextualizePrompt), Values.Walter1DefaultContextualizePrompt);
        _jw.WriteString(nameof(Walter1AssistantOptions.Archive), Archive_PineconeName_Full);
        _jw.WritePropertyName(nameof(Walter1AssistantOptions.InputProcessors));
        _jw.WriteStartArray();
        _jw.WriteYamlRefValue(Values.Walter1TextProcessor1);
        _jw.WriteYamlRefValue(Values.Walter1TextProcessor2);
        _jw.WriteEndArray();
        _jw.WriteEndObject();
        _jw.WriteEndObject();
    }

    private void WriteDistributedLockServiceOptions()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(DistributedLockServiceDI.ConfigurationSection);
        _jw.WriteString(nameof(DistributedLockServiceOptions.PostgreSQLClientName), PostgreSQLClientName);
        _jw.WriteString(nameof(DistributedLockServiceOptions.LockInterval), "00:00:01");
        _jw.WriteString(nameof(DistributedLockServiceOptions.RenewInterval), "00:00:10"); //3 retries (1 + 2 + 4 = 7 seconds) + plenty of buffer for latency
        _jw.WriteString(nameof(DistributedLockServiceOptions.GraceInterval), "00:00:30");
        _jw.WriteString(nameof(DistributedLockServiceOptions.CheckInterval), "00:00:10");
        _jw.WriteString(nameof(DistributedLockServiceOptions.AcquirePollingInterval), "00:00:01");
        _jw.WriteEndObject();
    }

    private void WriteProdRepos()
    {
        WriteAutoGenNotice();

        _jw.WriteStartObject(ProdRepoDI.ConfigurationSection);
        _jw.WriteStartObject(ProdRepoName);
        _jw.WriteString(nameof(ProdRepoOptions.PostgreSQLClientName), PostgreSQLClientName);
        _jw.WriteEndObject();
        _jw.WriteEndObject();
    }

    private void WriteSakenetwerkAssistant()
    {
        WriteAutoGenNotice();
        
        _jw.WriteStartObject(SakenetwerkAssistant.ConfigurationSection);
        _jw.WriteBoolean(nameof(SakenetwerkAssistantOptions.AdminMode), true);
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.JsonStoreName), JsonStore_sakenetwerk_cache);
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.OpenAIAgentName), OpenAIChatAgent.Models.gpt_4o_mini);
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.CleanCitiesPrompt), "We are cleaning a list of city names in South Africa.\nRemove leading and trailing spaces, commas and other noise.\nUse the English version of the city's name whenever possible.\nConvert abbreviated city names to full city names.\nFix spelling and grammar errors.");
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.CleanProvincesPrompt), "We are cleaning a list of province names in South Africa.\nRemove leading and trailing spaces, commas and other noise.\nUse the English version of the province's name whenever possible.\nConvert abbreviated province names to full province names.\nFix spelling and grammar errors.");
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.PostgreSQLClientName), PostgreSQLClientName);
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.ContextualizePrompt),
            """
            Given a user question, you need to define filters that will help us narrow down results in the Sakenetwerk database. We search with an AND filter over all of the fields that you specify. Search broadly - do not filter out anything that could eliminate valid results.
            
            Fields:
            - NameLike: An ILIKE condition on the name of the business, or empty for no filter. Only use this filter if the user asks for a specific name.
            - CityLike: An array of ILIKE conditions on the name of the city in South Africa that the business is in, or empty for no filter.
              -- Use the English version of the city's name whenever possible.
              -- Convert abbreviated city names to full city names.
            - Provinces: One or more, or empty for any.
            - Categories: All categories that relevant businesses would list themselves under in the database.
            - Tags: All tags that relevant businesses would list themselves under in the database.
            - EmailLike: The ILIKE value on the business' email, or empty for no filter.
            - PhoneNumber: One full or partial phone number to search for. No conditional segments. Replace +27 with 0.
            - UrlLike: The ILIKE value on the business' URL, or empty for no filter.
            - AdminCommand: An admin command to run, or None for no command.
            - ExplainFilter: A description of why this filter will find matches the user is interested in, and why it will not miss results that the user is interested in.
            """);
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.ExpandPrompt),
            "What categories / tags do you think this business could be in?  List all candidates that a user might search for this business in and explain why.");
        _jw.WriteString(nameof(SakenetwerkAssistantOptions.SystemPrompt),
            "You are Sakie, the helpful assistant for the Sakenetwerk list of enterprises in South Africa. Users may ask you to search this database on their behalf.\n" +
            "For every Listing you provide:\n" +
            "- General details\n" +
            "- RelevanceReasons: Determine from the business' name how likely they are to offer the specific product(s) or service(s) the user is looking for.  State the product/service and then how likely the business is to offer this kind of service: VERY LIKELY, LIKELY, POTENTIALLY, MAYBE, NOT AT ALL.\n" +
            "- Relevant: Based on your reasoning above, is this business very likely to fill the request?\n" +
            "Language: Always answer in Afrikaans.\n" +
            "Boundary: Do not answer questions that are unrelated to finding relevant businesses in the database.");
        _jw.WriteEndObject();
    }
    
    private void WriteConfigJsonStoreProvider()
    {
        WriteAutoGenNotice();
        
        _jw.WriteStartObject(ConfigJsonStoreProviderDI.ConfigurationSection);
        _jw.WriteString(nameof(ConfigJsonStoreProviderOptions.PostgreSQLClientName), PostgreSQLClientName);
        _jw.WriteString(nameof(ConfigJsonStoreProviderOptions.RefreshInterval), "00:00:01");
        _jw.WriteString(nameof(ConfigJsonStoreProviderOptions.RetryDelay), "00:00:01");
        _jw.WriteEndObject();
    }

    private void WriteProdS3Helper()
    {
        WriteAutoGenNotice();
        
        _jw.WriteStartObject(ProdS3HelperDI.ConfigurationSection);
        _jw.WriteStartObject(S3DefaultHelperName);
        _jw.WriteYamlRef(nameof(ProdS3HelperOptions.Region), Values.S3Region);
        _jw.WriteYamlRef(nameof(ProdS3HelperOptions.PrivateBucket), Values.S3PrivateBucket);
        _jw.WriteYamlRef(nameof(ProdS3HelperOptions.PublicBucket), Values.S3PublicBucket);
        _jw.WriteYamlRef(nameof(ProdS3HelperOptions.SecretAccessKey), Values.S3SecretAccessKey);
        _jw.WriteYamlRef(nameof(ProdS3HelperOptions.AccessKeyId), Values.S3AccessKeyId);
        _jw.WriteYamlRef(nameof(ProdS3HelperOptions.Session), Values.S3Session);
        _jw.WriteEndObject();
        _jw.WriteEndObject();
    }

    public string Write()
    {
        _jw.WriteStartObject();

        WriteProdRepos();
        WritePgConsoleOptions();
        WriteLuaCores();
        WriteOpenAIEmbedderOptions();
        WriteOpenAIChatAgents();
        WriteInMemoryArchives();
        WriteLineSpliiterOptions();
        WriteAzureAITranslators();
        WriteAzureContentSafety();
        WritePostgreSQLOptions();
        WriteContextAI();
        WriteLangfuse();
        WriteJsonStores();
        WritePythonProcesses();
        WritePythonDocX();
        WritePDFPlumber();
        WriteDocXToPDF();
        WritePDFToJpg();
        WritePostgreSQLBinaryStores();
        WriteGpt4VisionExtractor();
        WritePinecone();
        WriteVectorLinkImporterOptions();
        WriteFileServices();
        WriteEmbeddingCache();
        WriteChatCache();
        WriteWalter1Assistants();
        WriteDistributedLockServiceOptions();
        WriteSakenetwerkAssistant();
        WriteConfigJsonStoreProvider();
        WriteWeeleeOptions();
        WriteStructuredDataOptions();
        WriteProdS3Helper();
        _jw.WriteEndObject();

        _jw.Flush();
        return Encoding.UTF8.GetString(_ms.ToArray());
    }
}